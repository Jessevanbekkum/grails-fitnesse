!3 Decision Tables

First of all, there's the name of the table: "calculate". This is named for a decision to be made. That's good style. Decision tables should be named for decisions. However that name also translates to the fixture class Calculate. If you run this test you'll notice that the name turns green. This means that Slim found the fixture class and was able to create an instance of it.

The first cell could also have been Decision:calculate, or DT:calculate. The code Decision: or DT: tells Slim what kind of table this is. Decision table is the default.

Next, there's the row of column headers. If you look carefully at them you'll see that they all correspond to functions in the fixture class. However, the first three correspond to set functions. That's because they don't have a ?. The Decision Table considers them to be inputs, and automatically calls the appropriately named set function.

The last column header does have a ?. Decision Table considers it to be an output and so calls it as a function and expects a return value. That return value is compared to the contents of the column and turns the corresponding cell red or green depending whether it matches.

|calculate                       |
|operand 1|operand 2|expectation?|
|1        |3        |4           |
|9        |1        |10          |
|5        |5        |10          |
|90       |30       |120         |

The Fixture class for this Test looks like this:
{{{
class CalculateFixture {
    def calculateService

    int operand1
    int operand2

    int start = 0

    CalculateFixture() {
    }

    CalculateFixture(int start) {
        this.start = start
    }

    int expectation() {
        calculateService.addition(operand1, operand2) + start
    }

    public void setCalculateService(value) {
        this.calculateService = value
    }
}
}}}