<?xml version="1.0"?>
<testResults>
  <FitNesseVersion>v20110104</FitNesseVersion>
  <rootPath>QueryTables</rootPath>
    <result>
    <counts>
      <right>5</right>
      <wrong>0</wrong>
      <ignores>0</ignores>
      <exceptions>0</exceptions>
    </counts>
    <runTimeInMillis>69</runTimeInMillis>
    <content><![CDATA[<div class="collapse_rim">
	<div style="float: right;" class="meta">
		<a href="javascript:expandAll();">Expand All</a>
 | 
		<a href="javascript:collapseAll();">Collapse All</a>
	</div>
	<a href="javascript:toggleCollapsable('42');">
		<img src="/files/images/collapsableClosed.gif" class="left" id="img42"/>
	</a>
&nbsp;
	<span class="meta">Precompiled Libraries</span>
	<div class="hidden" id="42"><br/></div>
</div>
<br/><div class="collapse_rim">
	<div style="float: right;" class="meta">
		<a href="javascript:expandAll();">Expand All</a>
 | 
		<a href="javascript:collapseAll();">Collapse All</a>
	</div>
	<a href="javascript:toggleCollapsable('43');">
		<img src="/files/images/collapsableClosed.gif" class="left" id="img43"/>
	</a>
&nbsp;
	<span class="meta">Included page: <a href="FrontPage.AmasunSuite.SetUp">.Front Page .Amasun Suite .Set Up</a> <a href="FrontPage.AmasunSuite.SetUp?edit&amp;redirectToReferer=true&amp;redirectAction=">(edit)</a></span>
	<div class="hidden" id="43"><table border="1" cellspacing="0" _TABLENUMBER=4678028152595064877>
	<tr>
		<td>import</td>
	</tr>
	<tr>
		<td>nl.jworks.amasun.fitnesse.book</td>
	</tr>
	<tr>
		<td>nl.jworks.amasun.fitnesse.solution</td>
	</tr>
	<tr>
		<td>nl.jworks.guide</td>
	</tr>
	<tr>
		<td>nl.jworks.presentation</td>
	</tr>
</table>
</div>
</div>
<br/><h3>Query tables</h3>
<br/><br/>The rows in a query table represent the expected results of a query.<br/><br/><table border="1" cellspacing="0" _TABLENUMBER=2146269811432928388>
	<tr>
		<td><span class="pass">query:count</span></td>
		<td>5</td>
	</tr>
	<tr>
		<td colspan="2">result</td>
	</tr>
	<tr>
		<td colspan="2"><span class="pass">0</span></td>
	</tr>
	<tr>
		<td colspan="2"><span class="pass">1</span></td>
	</tr>
	<tr>
		<td colspan="2"><span class="pass">2</span></td>
	</tr>
	<tr>
		<td colspan="2"><span class="pass">3</span></td>
	</tr>
	<tr>
		<td colspan="2"><span class="pass">4</span></td>
	</tr>
</table>
<br/>The first thing to notice is the Query: in the first cell of the table. This tells the Slim table processor that this is a query table. Next notice the constructor argument. (See ConstructorArguments<a title="create page" href="FrontPage.AmasunSuite.TheManual.ConstructorArguments?edit&nonExistent=true">[?]</a>). The column headers are field names. The fixture class must have a query method that returns a list of rows. Each row is a list of fields. Each field is a two-element list composed of the field name and it's string value.<br/><br/>Each row in the table is checked to see if there is a match in the query response. The fields are matched left to right. If the leftmost field matches, then the row is considered to be "found". Fields that don't match are marked in error. A cell that is left blank in the table will be filled in from the result and counted as ignored. If the first cell of a row cannot be matched, then the row is considered missing. If there is an unmatched row remaining in the query response, it is added to the table and marked surplus. The order of the rows is irrelevant.<br/><br/>If a table method is declared in the fixture it will be called before the query function is called. It will be passed a list of rows which are themselves lists of cells. The rows and cells represent the all but the first row of the table. This is the same format at the doTable method of Table table, and the table method of Decision table.<br/><br/><b>Code</b><br/><pre>
class CountFixture {
    int number

    QueryFixture(int number) {
        this.number = number
    }

    List query() {
        def table = []

        number.times {
            def row = []
            row &lt;&lt; ["result", it]
            table &lt;&lt; row
        }

        return table
    }
}
</pre>
]]></content>
    <relativePageName>QueryTables</relativePageName>
    
        <tables>
            <table>
        <name>import_0</name>
                <row>
                    <col><![CDATA[import]]></col>
          
        </row>
                <row>
                    <col><![CDATA[nl.jworks.amasun.fitnesse.book]]></col>
          
        </row>
                <row>
                    <col><![CDATA[nl.jworks.amasun.fitnesse.solution]]></col>
          
        </row>
                <row>
                    <col><![CDATA[nl.jworks.guide]]></col>
          
        </row>
                <row>
                    <col><![CDATA[nl.jworks.presentation]]></col>
          
        </row>
        
      </table>
            <table>
        <name>queryTable_1</name>
                <row>
                    <col><![CDATA[pass(query:count)]]></col>
                    <col><![CDATA[5]]></col>
          
        </row>
                <row>
                    <col><![CDATA[result]]></col>
          
        </row>
                <row>
                    <col><![CDATA[pass(0)]]></col>
          
        </row>
                <row>
                    <col><![CDATA[pass(1)]]></col>
          
        </row>
                <row>
                    <col><![CDATA[pass(2)]]></col>
          
        </row>
                <row>
                    <col><![CDATA[pass(3)]]></col>
          
        </row>
                <row>
                    <col><![CDATA[pass(4)]]></col>
          
        </row>
        
      </table>
      
    </tables>
    
    
    <instructions>
            <instructionResult>
        <instruction><![CDATA[[import_0_0, import, nl.jworks.amasun.fitnesse.book]]]></instruction>
        <slimResult><![CDATA[OK]]></slimResult>
        
      </instructionResult>
            <instructionResult>
        <instruction><![CDATA[[import_0_1, import, nl.jworks.amasun.fitnesse.solution]]]></instruction>
        <slimResult><![CDATA[OK]]></slimResult>
        
      </instructionResult>
            <instructionResult>
        <instruction><![CDATA[[import_0_2, import, nl.jworks.guide]]]></instruction>
        <slimResult><![CDATA[OK]]></slimResult>
        
      </instructionResult>
            <instructionResult>
        <instruction><![CDATA[[import_0_3, import, nl.jworks.presentation]]]></instruction>
        <slimResult><![CDATA[OK]]></slimResult>
        
      </instructionResult>
            <instructionResult>
        <instruction><![CDATA[[queryTable_1_0, make, queryTable_1, count, 5]]]></instruction>
        <slimResult><![CDATA[OK]]></slimResult>
                <expectation>
          <status>right</status>
          <instructionId>queryTable_1_0</instructionId>
          <col>0</col>
          <row>0</row>
          <type>ConstructionExpectation</type>
                    <actual><![CDATA[OK]]></actual>
                              <expected><![CDATA[query:count]]></expected>
                              <evaluationMessage><![CDATA[pass(query:count)]]></evaluationMessage>
                  </expectation>
        
      </instructionResult>
            <instructionResult>
        <instruction><![CDATA[[queryTable_1_1, call, queryTable_1, table, [[result], [0], [1], [2], [3], [4]]]]]></instruction>
        <slimResult><![CDATA[__EXCEPTION__:fitnesse.slim.SlimError: message:<<NO_METHOD_IN_CLASS table[1] nl.jworks.guide.CountFixture.>>
	at fitnesse.slim.MethodExecutionResult$NoMethod.returnValue(MethodExecutionResult.java:27)
	at nl.jworks.fitnesse.ProtectedStatementExecutor.call(ProtectedStatementExecutor.groovy:215)
	at fitnesse.slim.Statement.callMethodAtIndex(Statement.java:99)
	at fitnesse.slim.Statement.call(Statement.java:92)
	at fitnesse.slim.Statement.execute(Statement.java:72)
	at fitnesse.slim.ListExecutor.execute(ListExecutor.java:36)
	at fitnesse.slim.SlimServer.executeInstructions(SlimServer.java:93)
	at fitnesse.slim.SlimServer.processTheInstructions(SlimServer.java:78)
	at fitnesse.slim.SlimServer.processOneSetOfInstructions(SlimServer.java:69)
	at fitnesse.slim.SlimServer.tryProcessInstructions(SlimServer.java:55)
	at fitnesse.slim.SlimServer.serve(SlimServer.java:30)
	at nl.jworks.grails.plugin.fitnesse.HibernateSessionSlimServer.super$2$serve(HibernateSessionSlimServer.groovy)
	at nl.jworks.grails.plugin.fitnesse.HibernateSessionSlimServer.serve(HibernateSessionSlimServer.groovy:34)
	at fitnesse.socketservice.SocketService$ServerRunner.run(SocketService.java:95)
	at java.lang.Thread.run(Thread.java:680)
]]></slimResult>
                <expectation>
          <status>ignored</status>
          <instructionId>queryTable_1_1</instructionId>
          <col>1</col>
          <row>0</row>
          <type>VoidReturnExpectation</type>
                    <actual><![CDATA[__EXCEPTION__:fitnesse.slim.SlimError: message:<<NO_METHOD_IN_CLASS table[1] nl.jworks.guide.CountFixture.>>
	at fitnesse.slim.MethodExecutionResult$NoMethod.returnValue(MethodExecutionResult.java:27)
	at nl.jworks.fitnesse.ProtectedStatementExecutor.call(ProtectedStatementExecutor.groovy:215)
	at fitnesse.slim.Statement.callMethodAtIndex(Statement.java:99)
	at fitnesse.slim.Statement.call(Statement.java:92)
	at fitnesse.slim.Statement.execute(Statement.java:72)
	at fitnesse.slim.ListExecutor.execute(ListExecutor.java:36)
	at fitnesse.slim.SlimServer.executeInstructions(SlimServer.java:93)
	at fitnesse.slim.SlimServer.processTheInstructions(SlimServer.java:78)
	at fitnesse.slim.SlimServer.processOneSetOfInstructions(SlimServer.java:69)
	at fitnesse.slim.SlimServer.tryProcessInstructions(SlimServer.java:55)
	at fitnesse.slim.SlimServer.serve(SlimServer.java:30)
	at nl.jworks.grails.plugin.fitnesse.HibernateSessionSlimServer.super$2$serve(HibernateSessionSlimServer.groovy)
	at nl.jworks.grails.plugin.fitnesse.HibernateSessionSlimServer.serve(HibernateSessionSlimServer.groovy:34)
	at fitnesse.socketservice.SocketService$ServerRunner.run(SocketService.java:95)
	at java.lang.Thread.run(Thread.java:680)
]]></actual>
                              <expected><![CDATA[5]]></expected>
                              <evaluationMessage><![CDATA[5]]></evaluationMessage>
                  </expectation>
        
      </instructionResult>
            <instructionResult>
        <instruction><![CDATA[[queryTable_1_2, call, queryTable_1, query]]]></instruction>
        <slimResult><![CDATA[[[[result, 0]], [[result, 1]], [[result, 2]], [[result, 3]], [[result, 4]]]]]></slimResult>
        
      </instructionResult>
      
    </instructions>
    
  </result>
  
    <finalCounts>
    <right>0</right>
    <wrong>0</wrong>
    <ignores>0</ignores>
    <exceptions>0</exceptions>
  </finalCounts>
  <totalRunTimeInMillis>0</totalRunTimeInMillis>
  
</testResults>

