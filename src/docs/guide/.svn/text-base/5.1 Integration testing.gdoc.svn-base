This tutorial describes the creation of a simple application and how to test it.

h4. 1. Create your Grails application.

{code}
$ grails create-app bookstore
$ cd bookstore
{code}
h4. 2. Install the plugin.
{code}
$ grails install-plugin fitnesse
{code}

We are going to create a small bookstore with a small domain to test the core functionality without using a Functional or Unit test.
Normally, I would recommend using Unit tests after writing the Fitnesse Acceptance Test, but that is outside the scope of this tutorial. 

To start in a Test Driven approach, we'll start by creating the test first.

To do so, we'll need to start Fitnesse as well as Grails.

h4. 3. Start the Grails server.
{code}
$ grails run-app
{code}

h4. 4. Start the Fitnesse server.

If you haven't downloaded Fitnesse yet, please do download it from the [Fitnesse website|http://www.fitnesse.org].

The following will extract Fitnesse and start it on port 9090.
{code}
$ java -jar fitnesse.jar -p 9090
{code}

h4. 5. Create the test

Open a web browser and point it to http://localhost:9090 . The Fitnesse front page will show up.

Click on *Edit*, and add the following to the text area: @^BookStoreTest@ . Press *Save*.

You will now have a text with a question mark next to it. Click on the question mark to create a new page.

In the new page, remove the contents of the text area and replace it by the following:

{code}
!define TEST_SYSTEM {slim}
!define COMMAND_PATTERN {echo}

|create book inventory|
|author|title|amount|
|Stephen King|IT|3|
|Dean Koontz|Chase|5|

|script|buy book scenario|
|customer buys|2|books with title|IT|
|customer buys|1|books with title|Chase|

|query:check book inventory|
|Stephen King|IT|1|
|Dean Koontz|Chase|4|
{code}

Press save after you created the page.

{note}
The COMMAND_PATTERN should (currently) have a dummy value! I have chosen 'ls' since I'm on a Mac, but for Windows users you (probably...) can type something like cmd.exe here. I haven't tested this, since I have no access to machine running Windows.
{note}

In this test, you've used 3 kinds of Test tables:
* a [Decision Table|http://www.fitnesse.org/FitNesse.UserGuide.SliM.DecisionTable] (@create book inventory@) used to setup the data
* a [Script Table|http://www.fitnesse.org/FitNesse.UserGuide.SliM.ScriptTable] (@buy book scenario@) to execute the test
* a [Query table|http://www.fitnesse.org/FitNesse.UserGuide.SliM.QueryTable] (@check book inventory@) to verify the results of the test

Click on *Test* on the left side of the page. The test will execute, and will fail with errors like @Could not invoke constructor for CreateBookInventory\[0\]@. This is because no Fixtures have been created yet. This way of working is in line with the 'Red-Green-Refactor' TDD mantra; our test clearly is red (or yellow, in this case), so we need to focus on getting the test green. To make the test pass, we need to create the fixtures.

h4. 6. Creating the Fixtures

We'll start by creating the first Fixture mentioned in the error message, which is the @CreateBookInventory@ Fixture. In your Grails project, go to the @grails-app/fitnesse@ directory, and create a file called @CreateBookInventory.groovy@. Because the Fitnesse plugin will reload the Fixtures automatically, pressing the *Test* button in the Wiki will already show that the Fixture has been loaded correctly, and the cell is colored green by Fitnesse.

Now, we'll have to create  the author, title and amount properties in the Fixture and the corresponding @Book@ domain class.

{note}
Note, Grails might crash due to the Fixture missing the domain classes. Whenever this happens, please restart Grails.
{note}

h5. 6.1 The Decision Table

The Fixture to support the [Decision Table|http://www.fitnesse.org/FitNesse.UserGuide.SliM.ScriptTable] should look like this:

{code}
class CreateBookInventoryFixture {
    String author
    String title

    int amount

    def bookService

    CreateBookInventory() {
        Book.list()*.delete()
    }

    void execute() {
        amount.times {
            bookService.addBook(new Book(author: author, title: title))
        }
    }
}
{code}

The Fixture has an @execute@ method. This method is called after input parameters have been set, but before any output parameters are requested. This allows us to have a place to do something with the input, and prepare the output.

The Book class like this:

{code}
class Book {
    String author
    String title
}
{code}

We also need a BookService class, since the Fixtures should not hold any logic; they are just a translation of the test with the SUT. The BookService looks like this:

{code}
class BookService {

    static transactional = true

    def addBook(book) {
        book.save()
    }

    def buyBook(title) {
        Book.findByTitle(title).delete()
    }

    def checkInventory() {
        Book.executeQuery("select b.title, b.author, count(*) from Book b group by title, author")
    }
}
{code}

Execute the test again, and the first part of the test should be green. If not, and you're sure you've executed all steps correctly, please let me know because it would mean there's an error in the tutorial, or I've been unclear in the way to explain things. In any way, if you're stuck, please let [me|http://www.jworks.nl/contact] know.

h5. 6.2 The Script Table

The Script Fixture to execute the [Script Table|http://www.fitnesse.org/FitNesse.UserGuide.SliM.ScriptTable] should look like this:

{code}
class BuyBookScenarioFixture {
    def bookService

    void customerBuysBooksWithTitle(int amount, title) {
        amount.times {
            bookService.buyBook(title)
        }
    }
}
{code}

{note}
Note that this implementation is very simplistic. In this example, I simply delete the books from the inventory instead of assigning them to a customer or a basket.
{note}

h5. 6.3 The Query Table

Finally, to verify if our assertions match the execution of our code, we need to check the results of our actions. We do this by using a [Query Table|http://www.fitnesse.org/FitNesse.UserGuide.SliM.QueryTable].

{code}
class CheckBookInventoryFixture {
    def queryFixture = true  // indication that this is a query fixture
    static mapping = [title: 0, author: 1, amount: 2]  // the mapping

    def bookService       // injected service

    def queryResults() {  // queryResults() method, which must be named like this!
        bookService.checkInventory()
    }
}
{code}

Now, when running the Test again in Fitnesse, everything should be green, and you have your first test running. Not you can refactor your code if you want, and check if the result is still valid by rerunning the Tests!